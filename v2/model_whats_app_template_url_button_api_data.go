/**
 * Infobip Client API Libraries OpenAPI Specification
 *
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package infobip

import (
	"encoding/json"
)

// WhatsAppTemplateUrlButtonApiData struct for WhatsAppTemplateUrlButtonApiData
type WhatsAppTemplateUrlButtonApiData struct {
	WhatsAppTemplateButtonApiData
	// Button text.
	Text string `json:"text"`
	// URL to which the end-user will be directed when hitting the button. URL is expected to start with `https://` or `http://`. Can be static or dynamic. For dynamic URL registration, add a placeholder {{1}} at the end of the link. Example: `https://www.infobip.com/{{1}}`
	Url string `json:"url"`
}

// NewWhatsAppTemplateUrlButtonApiData instantiates a new WhatsAppTemplateUrlButtonApiData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWhatsAppTemplateUrlButtonApiData(text string, url string) *WhatsAppTemplateUrlButtonApiData {
	this := WhatsAppTemplateUrlButtonApiData{}
	this.Text = text
	this.Url = url
	return &this
}

// NewWhatsAppTemplateUrlButtonApiDataWithDefaults instantiates a new WhatsAppTemplateUrlButtonApiData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWhatsAppTemplateUrlButtonApiDataWithDefaults() *WhatsAppTemplateUrlButtonApiData {
	this := WhatsAppTemplateUrlButtonApiData{}
	return &this
}

// GetText returns the Text field value
func (o *WhatsAppTemplateUrlButtonApiData) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *WhatsAppTemplateUrlButtonApiData) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *WhatsAppTemplateUrlButtonApiData) SetText(v string) {
	o.Text = v
}

// GetUrl returns the Url field value
func (o *WhatsAppTemplateUrlButtonApiData) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *WhatsAppTemplateUrlButtonApiData) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *WhatsAppTemplateUrlButtonApiData) SetUrl(v string) {
	o.Url = v
}

func (o WhatsAppTemplateUrlButtonApiData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedWhatsAppTemplateButtonApiData, errWhatsAppTemplateButtonApiData := json.Marshal(o.WhatsAppTemplateButtonApiData)
	if errWhatsAppTemplateButtonApiData != nil {
		return []byte{}, errWhatsAppTemplateButtonApiData
	}
	errWhatsAppTemplateButtonApiData = json.Unmarshal([]byte(serializedWhatsAppTemplateButtonApiData), &toSerialize)
	if errWhatsAppTemplateButtonApiData != nil {
		return []byte{}, errWhatsAppTemplateButtonApiData
	}
	if true {
		toSerialize["text"] = o.Text
	}
	if true {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableWhatsAppTemplateUrlButtonApiData struct {
	value *WhatsAppTemplateUrlButtonApiData
	isSet bool
}

func (v NullableWhatsAppTemplateUrlButtonApiData) Get() *WhatsAppTemplateUrlButtonApiData {
	return v.value
}

func (v *NullableWhatsAppTemplateUrlButtonApiData) Set(val *WhatsAppTemplateUrlButtonApiData) {
	v.value = val
	v.isSet = true
}

func (v NullableWhatsAppTemplateUrlButtonApiData) IsSet() bool {
	return v.isSet
}

func (v *NullableWhatsAppTemplateUrlButtonApiData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhatsAppTemplateUrlButtonApiData(val *WhatsAppTemplateUrlButtonApiData) *NullableWhatsAppTemplateUrlButtonApiData {
	return &NullableWhatsAppTemplateUrlButtonApiData{value: val, isSet: true}
}

func (v NullableWhatsAppTemplateUrlButtonApiData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhatsAppTemplateUrlButtonApiData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
