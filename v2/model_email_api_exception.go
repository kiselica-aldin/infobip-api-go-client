/**
 * Infobip Client API Libraries OpenAPI Specification
 *
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package infobip

import (
	"encoding/json"
)

// EmailApiException struct for EmailApiException
type EmailApiException struct {
	RequestError *EmailApiRequestError `json:"requestError,omitempty"`
}

// NewEmailApiException instantiates a new EmailApiException object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailApiException() *EmailApiException {
	this := EmailApiException{}
	return &this
}

// NewEmailApiExceptionWithDefaults instantiates a new EmailApiException object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailApiExceptionWithDefaults() *EmailApiException {
	this := EmailApiException{}
	return &this
}

// GetRequestError returns the RequestError field value if set, zero value otherwise.
func (o *EmailApiException) GetRequestError() EmailApiRequestError {
	if o == nil || o.RequestError == nil {
		var ret EmailApiRequestError
		return ret
	}
	return *o.RequestError
}

// GetRequestErrorOk returns a tuple with the RequestError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailApiException) GetRequestErrorOk() (*EmailApiRequestError, bool) {
	if o == nil || o.RequestError == nil {
		return nil, false
	}
	return o.RequestError, true
}

// HasRequestError returns a boolean if a field has been set.
func (o *EmailApiException) HasRequestError() bool {
	if o != nil && o.RequestError != nil {
		return true
	}

	return false
}

// SetRequestError gets a reference to the given EmailApiRequestError and assigns it to the RequestError field.
func (o *EmailApiException) SetRequestError(v EmailApiRequestError) {
	o.RequestError = &v
}

func (o EmailApiException) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RequestError != nil {
		toSerialize["requestError"] = o.RequestError
	}
	return json.Marshal(toSerialize)
}

type NullableEmailApiException struct {
	value *EmailApiException
	isSet bool
}

func (v NullableEmailApiException) Get() *EmailApiException {
	return v.value
}

func (v *NullableEmailApiException) Set(val *EmailApiException) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailApiException) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailApiException) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailApiException(val *EmailApiException) *NullableEmailApiException {
	return &NullableEmailApiException{value: val, isSet: true}
}

func (v NullableEmailApiException) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailApiException) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
