/**
 * Infobip Client API Libraries OpenAPI Specification
 *
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package infobip

import (
	"encoding/json"
)

// EmailPrice struct for EmailPrice
type EmailPrice struct {
	Currency        *string  `json:"currency,omitempty"`
	PricePerLookup  *float64 `json:"pricePerLookup,omitempty"`
	PricePerMessage *float64 `json:"pricePerMessage,omitempty"`
}

// NewEmailPrice instantiates a new EmailPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailPrice() *EmailPrice {
	this := EmailPrice{}
	return &this
}

// NewEmailPriceWithDefaults instantiates a new EmailPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailPriceWithDefaults() *EmailPrice {
	this := EmailPrice{}
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *EmailPrice) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailPrice) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *EmailPrice) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *EmailPrice) SetCurrency(v string) {
	o.Currency = &v
}

// GetPricePerLookup returns the PricePerLookup field value if set, zero value otherwise.
func (o *EmailPrice) GetPricePerLookup() float64 {
	if o == nil || o.PricePerLookup == nil {
		var ret float64
		return ret
	}
	return *o.PricePerLookup
}

// GetPricePerLookupOk returns a tuple with the PricePerLookup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailPrice) GetPricePerLookupOk() (*float64, bool) {
	if o == nil || o.PricePerLookup == nil {
		return nil, false
	}
	return o.PricePerLookup, true
}

// HasPricePerLookup returns a boolean if a field has been set.
func (o *EmailPrice) HasPricePerLookup() bool {
	if o != nil && o.PricePerLookup != nil {
		return true
	}

	return false
}

// SetPricePerLookup gets a reference to the given float64 and assigns it to the PricePerLookup field.
func (o *EmailPrice) SetPricePerLookup(v float64) {
	o.PricePerLookup = &v
}

// GetPricePerMessage returns the PricePerMessage field value if set, zero value otherwise.
func (o *EmailPrice) GetPricePerMessage() float64 {
	if o == nil || o.PricePerMessage == nil {
		var ret float64
		return ret
	}
	return *o.PricePerMessage
}

// GetPricePerMessageOk returns a tuple with the PricePerMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailPrice) GetPricePerMessageOk() (*float64, bool) {
	if o == nil || o.PricePerMessage == nil {
		return nil, false
	}
	return o.PricePerMessage, true
}

// HasPricePerMessage returns a boolean if a field has been set.
func (o *EmailPrice) HasPricePerMessage() bool {
	if o != nil && o.PricePerMessage != nil {
		return true
	}

	return false
}

// SetPricePerMessage gets a reference to the given float64 and assigns it to the PricePerMessage field.
func (o *EmailPrice) SetPricePerMessage(v float64) {
	o.PricePerMessage = &v
}

func (o EmailPrice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.PricePerLookup != nil {
		toSerialize["pricePerLookup"] = o.PricePerLookup
	}
	if o.PricePerMessage != nil {
		toSerialize["pricePerMessage"] = o.PricePerMessage
	}
	return json.Marshal(toSerialize)
}

type NullableEmailPrice struct {
	value *EmailPrice
	isSet bool
}

func (v NullableEmailPrice) Get() *EmailPrice {
	return v.value
}

func (v *NullableEmailPrice) Set(val *EmailPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailPrice(val *EmailPrice) *NullableEmailPrice {
	return &NullableEmailPrice{value: val, isSet: true}
}

func (v NullableEmailPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
