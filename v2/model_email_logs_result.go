/**
 * Infobip Client API Libraries OpenAPI Specification
 *
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package infobip

import (
	"encoding/json"
)

// EmailLogsResult struct for EmailLogsResult
type EmailLogsResult struct {
	Results *[]EmailLog `json:"results,omitempty"`
}

// NewEmailLogsResult instantiates a new EmailLogsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailLogsResult() *EmailLogsResult {
	this := EmailLogsResult{}
	return &this
}

// NewEmailLogsResultWithDefaults instantiates a new EmailLogsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailLogsResultWithDefaults() *EmailLogsResult {
	this := EmailLogsResult{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *EmailLogsResult) GetResults() []EmailLog {
	if o == nil || o.Results == nil {
		var ret []EmailLog
		return ret
	}
	return *o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailLogsResult) GetResultsOk() (*[]EmailLog, bool) {
	if o == nil || o.Results == nil {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *EmailLogsResult) HasResults() bool {
	if o != nil && o.Results != nil {
		return true
	}

	return false
}

// SetResults gets a reference to the given []EmailLog and assigns it to the Results field.
func (o *EmailLogsResult) SetResults(v []EmailLog) {
	o.Results = &v
}

func (o EmailLogsResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}
	return json.Marshal(toSerialize)
}

type NullableEmailLogsResult struct {
	value *EmailLogsResult
	isSet bool
}

func (v NullableEmailLogsResult) Get() *EmailLogsResult {
	return v.value
}

func (v *NullableEmailLogsResult) Set(val *EmailLogsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailLogsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailLogsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailLogsResult(val *EmailLogsResult) *NullableEmailLogsResult {
	return &NullableEmailLogsResult{value: val, isSet: true}
}

func (v NullableEmailLogsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailLogsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
