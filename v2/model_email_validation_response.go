/**
 * Infobip Client API Libraries OpenAPI Specification
 *
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package infobip

import (
	"encoding/json"
)

// EmailValidationResponse struct for EmailValidationResponse
type EmailValidationResponse struct {
	CatchAll     *bool   `json:"catchAll,omitempty"`
	DidYouMean   *string `json:"didYouMean,omitempty"`
	Disposable   *bool   `json:"disposable,omitempty"`
	RoleBased    *bool   `json:"roleBased,omitempty"`
	To           *string `json:"to,omitempty"`
	ValidMailbox *string `json:"validMailbox,omitempty"`
	ValidSyntax  *bool   `json:"validSyntax,omitempty"`
}

// NewEmailValidationResponse instantiates a new EmailValidationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailValidationResponse() *EmailValidationResponse {
	this := EmailValidationResponse{}
	return &this
}

// NewEmailValidationResponseWithDefaults instantiates a new EmailValidationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailValidationResponseWithDefaults() *EmailValidationResponse {
	this := EmailValidationResponse{}
	return &this
}

// GetCatchAll returns the CatchAll field value if set, zero value otherwise.
func (o *EmailValidationResponse) GetCatchAll() bool {
	if o == nil || o.CatchAll == nil {
		var ret bool
		return ret
	}
	return *o.CatchAll
}

// GetCatchAllOk returns a tuple with the CatchAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailValidationResponse) GetCatchAllOk() (*bool, bool) {
	if o == nil || o.CatchAll == nil {
		return nil, false
	}
	return o.CatchAll, true
}

// HasCatchAll returns a boolean if a field has been set.
func (o *EmailValidationResponse) HasCatchAll() bool {
	if o != nil && o.CatchAll != nil {
		return true
	}

	return false
}

// SetCatchAll gets a reference to the given bool and assigns it to the CatchAll field.
func (o *EmailValidationResponse) SetCatchAll(v bool) {
	o.CatchAll = &v
}

// GetDidYouMean returns the DidYouMean field value if set, zero value otherwise.
func (o *EmailValidationResponse) GetDidYouMean() string {
	if o == nil || o.DidYouMean == nil {
		var ret string
		return ret
	}
	return *o.DidYouMean
}

// GetDidYouMeanOk returns a tuple with the DidYouMean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailValidationResponse) GetDidYouMeanOk() (*string, bool) {
	if o == nil || o.DidYouMean == nil {
		return nil, false
	}
	return o.DidYouMean, true
}

// HasDidYouMean returns a boolean if a field has been set.
func (o *EmailValidationResponse) HasDidYouMean() bool {
	if o != nil && o.DidYouMean != nil {
		return true
	}

	return false
}

// SetDidYouMean gets a reference to the given string and assigns it to the DidYouMean field.
func (o *EmailValidationResponse) SetDidYouMean(v string) {
	o.DidYouMean = &v
}

// GetDisposable returns the Disposable field value if set, zero value otherwise.
func (o *EmailValidationResponse) GetDisposable() bool {
	if o == nil || o.Disposable == nil {
		var ret bool
		return ret
	}
	return *o.Disposable
}

// GetDisposableOk returns a tuple with the Disposable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailValidationResponse) GetDisposableOk() (*bool, bool) {
	if o == nil || o.Disposable == nil {
		return nil, false
	}
	return o.Disposable, true
}

// HasDisposable returns a boolean if a field has been set.
func (o *EmailValidationResponse) HasDisposable() bool {
	if o != nil && o.Disposable != nil {
		return true
	}

	return false
}

// SetDisposable gets a reference to the given bool and assigns it to the Disposable field.
func (o *EmailValidationResponse) SetDisposable(v bool) {
	o.Disposable = &v
}

// GetRoleBased returns the RoleBased field value if set, zero value otherwise.
func (o *EmailValidationResponse) GetRoleBased() bool {
	if o == nil || o.RoleBased == nil {
		var ret bool
		return ret
	}
	return *o.RoleBased
}

// GetRoleBasedOk returns a tuple with the RoleBased field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailValidationResponse) GetRoleBasedOk() (*bool, bool) {
	if o == nil || o.RoleBased == nil {
		return nil, false
	}
	return o.RoleBased, true
}

// HasRoleBased returns a boolean if a field has been set.
func (o *EmailValidationResponse) HasRoleBased() bool {
	if o != nil && o.RoleBased != nil {
		return true
	}

	return false
}

// SetRoleBased gets a reference to the given bool and assigns it to the RoleBased field.
func (o *EmailValidationResponse) SetRoleBased(v bool) {
	o.RoleBased = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *EmailValidationResponse) GetTo() string {
	if o == nil || o.To == nil {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailValidationResponse) GetToOk() (*string, bool) {
	if o == nil || o.To == nil {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *EmailValidationResponse) HasTo() bool {
	if o != nil && o.To != nil {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *EmailValidationResponse) SetTo(v string) {
	o.To = &v
}

// GetValidMailbox returns the ValidMailbox field value if set, zero value otherwise.
func (o *EmailValidationResponse) GetValidMailbox() string {
	if o == nil || o.ValidMailbox == nil {
		var ret string
		return ret
	}
	return *o.ValidMailbox
}

// GetValidMailboxOk returns a tuple with the ValidMailbox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailValidationResponse) GetValidMailboxOk() (*string, bool) {
	if o == nil || o.ValidMailbox == nil {
		return nil, false
	}
	return o.ValidMailbox, true
}

// HasValidMailbox returns a boolean if a field has been set.
func (o *EmailValidationResponse) HasValidMailbox() bool {
	if o != nil && o.ValidMailbox != nil {
		return true
	}

	return false
}

// SetValidMailbox gets a reference to the given string and assigns it to the ValidMailbox field.
func (o *EmailValidationResponse) SetValidMailbox(v string) {
	o.ValidMailbox = &v
}

// GetValidSyntax returns the ValidSyntax field value if set, zero value otherwise.
func (o *EmailValidationResponse) GetValidSyntax() bool {
	if o == nil || o.ValidSyntax == nil {
		var ret bool
		return ret
	}
	return *o.ValidSyntax
}

// GetValidSyntaxOk returns a tuple with the ValidSyntax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailValidationResponse) GetValidSyntaxOk() (*bool, bool) {
	if o == nil || o.ValidSyntax == nil {
		return nil, false
	}
	return o.ValidSyntax, true
}

// HasValidSyntax returns a boolean if a field has been set.
func (o *EmailValidationResponse) HasValidSyntax() bool {
	if o != nil && o.ValidSyntax != nil {
		return true
	}

	return false
}

// SetValidSyntax gets a reference to the given bool and assigns it to the ValidSyntax field.
func (o *EmailValidationResponse) SetValidSyntax(v bool) {
	o.ValidSyntax = &v
}

func (o EmailValidationResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CatchAll != nil {
		toSerialize["catchAll"] = o.CatchAll
	}
	if o.DidYouMean != nil {
		toSerialize["didYouMean"] = o.DidYouMean
	}
	if o.Disposable != nil {
		toSerialize["disposable"] = o.Disposable
	}
	if o.RoleBased != nil {
		toSerialize["roleBased"] = o.RoleBased
	}
	if o.To != nil {
		toSerialize["to"] = o.To
	}
	if o.ValidMailbox != nil {
		toSerialize["validMailbox"] = o.ValidMailbox
	}
	if o.ValidSyntax != nil {
		toSerialize["validSyntax"] = o.ValidSyntax
	}
	return json.Marshal(toSerialize)
}

type NullableEmailValidationResponse struct {
	value *EmailValidationResponse
	isSet bool
}

func (v NullableEmailValidationResponse) Get() *EmailValidationResponse {
	return v.value
}

func (v *NullableEmailValidationResponse) Set(val *EmailValidationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailValidationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailValidationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailValidationResponse(val *EmailValidationResponse) *NullableEmailValidationResponse {
	return &NullableEmailValidationResponse{value: val, isSet: true}
}

func (v NullableEmailValidationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailValidationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
