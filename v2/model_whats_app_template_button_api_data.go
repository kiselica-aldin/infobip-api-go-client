/**
 * Infobip Client API Libraries OpenAPI Specification
 *
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package infobip

import (
	"encoding/json"
)

// WhatsAppTemplateButtonApiData Template buttons. Can be either up to 3 `quick reply` buttons or up to 2 `call to action` buttons. Call to action buttons must be unique in type.
type WhatsAppTemplateButtonApiData struct {
	Type *string `json:"type,omitempty"`
	Text *string `json:"text,omitempty"`
}

// NewWhatsAppTemplateButtonApiData instantiates a new WhatsAppTemplateButtonApiData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWhatsAppTemplateButtonApiData() *WhatsAppTemplateButtonApiData {
	this := WhatsAppTemplateButtonApiData{}
	return &this
}

// NewWhatsAppTemplateButtonApiDataWithDefaults instantiates a new WhatsAppTemplateButtonApiData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWhatsAppTemplateButtonApiDataWithDefaults() *WhatsAppTemplateButtonApiData {
	this := WhatsAppTemplateButtonApiData{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *WhatsAppTemplateButtonApiData) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsAppTemplateButtonApiData) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *WhatsAppTemplateButtonApiData) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *WhatsAppTemplateButtonApiData) SetType(v string) {
	o.Type = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *WhatsAppTemplateButtonApiData) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsAppTemplateButtonApiData) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *WhatsAppTemplateButtonApiData) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *WhatsAppTemplateButtonApiData) SetText(v string) {
	o.Text = &v
}

func (o WhatsAppTemplateButtonApiData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	return json.Marshal(toSerialize)
}

type NullableWhatsAppTemplateButtonApiData struct {
	value *WhatsAppTemplateButtonApiData
	isSet bool
}

func (v NullableWhatsAppTemplateButtonApiData) Get() *WhatsAppTemplateButtonApiData {
	return v.value
}

func (v *NullableWhatsAppTemplateButtonApiData) Set(val *WhatsAppTemplateButtonApiData) {
	v.value = val
	v.isSet = true
}

func (v NullableWhatsAppTemplateButtonApiData) IsSet() bool {
	return v.isSet
}

func (v *NullableWhatsAppTemplateButtonApiData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhatsAppTemplateButtonApiData(val *WhatsAppTemplateButtonApiData) *NullableWhatsAppTemplateButtonApiData {
	return &NullableWhatsAppTemplateButtonApiData{value: val, isSet: true}
}

func (v NullableWhatsAppTemplateButtonApiData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhatsAppTemplateButtonApiData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
