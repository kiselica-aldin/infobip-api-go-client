/**
 * Infobip Client API Libraries OpenAPI Specification
 *
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package infobip

import (
	"encoding/json"
)

// EmailReportsResult struct for EmailReportsResult
type EmailReportsResult struct {
	Results *[]EmailReport `json:"results,omitempty"`
}

// NewEmailReportsResult instantiates a new EmailReportsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailReportsResult() *EmailReportsResult {
	this := EmailReportsResult{}
	return &this
}

// NewEmailReportsResultWithDefaults instantiates a new EmailReportsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailReportsResultWithDefaults() *EmailReportsResult {
	this := EmailReportsResult{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *EmailReportsResult) GetResults() []EmailReport {
	if o == nil || o.Results == nil {
		var ret []EmailReport
		return ret
	}
	return *o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailReportsResult) GetResultsOk() (*[]EmailReport, bool) {
	if o == nil || o.Results == nil {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *EmailReportsResult) HasResults() bool {
	if o != nil && o.Results != nil {
		return true
	}

	return false
}

// SetResults gets a reference to the given []EmailReport and assigns it to the Results field.
func (o *EmailReportsResult) SetResults(v []EmailReport) {
	o.Results = &v
}

func (o EmailReportsResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}
	return json.Marshal(toSerialize)
}

type NullableEmailReportsResult struct {
	value *EmailReportsResult
	isSet bool
}

func (v NullableEmailReportsResult) Get() *EmailReportsResult {
	return v.value
}

func (v *NullableEmailReportsResult) Set(val *EmailReportsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailReportsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailReportsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailReportsResult(val *EmailReportsResult) *NullableEmailReportsResult {
	return &NullableEmailReportsResult{value: val, isSet: true}
}

func (v NullableEmailReportsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailReportsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
