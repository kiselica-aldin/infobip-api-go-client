/**
 * Infobip Client API Libraries OpenAPI Specification
 *
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package infobip

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"os"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ReceiveWhatsAppMessageApiService ReceiveWhatsAppMessageApi service
type ReceiveWhatsAppMessageApiService service

type ApiDownloadWhatsappInboundMediaRequest struct {
	ctx        _context.Context
	ApiService *ReceiveWhatsAppMessageApiService
	sender     string
	mediaId    string
}

func (r ApiDownloadWhatsappInboundMediaRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.DownloadWhatsappInboundMediaExecute(r)
}

/*
 * DownloadWhatsappInboundMedia Download inbound media
 * Download WhatsApp media sent by end-users.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param sender Registered WhatsApp sender number. Must be in international format.
 * @param mediaId ID of the media.
 * @return ApiDownloadWhatsappInboundMediaRequest
 */
func (a *ReceiveWhatsAppMessageApiService) DownloadWhatsappInboundMedia(ctx _context.Context, sender string, mediaId string) ApiDownloadWhatsappInboundMediaRequest {
	return ApiDownloadWhatsappInboundMediaRequest{
		ApiService: a,
		ctx:        ctx,
		sender:     sender,
		mediaId:    mediaId,
	}
}

/*
 * Execute executes the request
 * @return *os.File
 */
func (a *ReceiveWhatsAppMessageApiService) DownloadWhatsappInboundMediaExecute(r ApiDownloadWhatsappInboundMediaRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReceiveWhatsAppMessageApiService.DownloadWhatsappInboundMedia")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/whatsapp/1/senders/{sender}/media/{mediaId}"
	localVarPath = strings.Replace(localVarPath, "{"+"sender"+"}", _neturl.PathEscape(parameterToString(r.sender, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mediaId"+"}", _neturl.PathEscape(parameterToString(r.mediaId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWhatsappMediaMetadataRequest struct {
	ctx        _context.Context
	ApiService *ReceiveWhatsAppMessageApiService
	sender     string
	mediaId    string
}

func (r ApiGetWhatsappMediaMetadataRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.GetWhatsappMediaMetadataExecute(r)
}

/*
 * GetWhatsappMediaMetadata Get media metadata
 * Get metadata of WhatsApp media sent by end-users.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param sender Registered WhatsApp sender number. Must be in international format.
 * @param mediaId ID of the media.
 * @return ApiGetWhatsappMediaMetadataRequest
 */
func (a *ReceiveWhatsAppMessageApiService) GetWhatsappMediaMetadata(ctx _context.Context, sender string, mediaId string) ApiGetWhatsappMediaMetadataRequest {
	return ApiGetWhatsappMediaMetadataRequest{
		ApiService: a,
		ctx:        ctx,
		sender:     sender,
		mediaId:    mediaId,
	}
}

/*
 * Execute executes the request
 * @return string
 */
func (a *ReceiveWhatsAppMessageApiService) GetWhatsappMediaMetadataExecute(r ApiGetWhatsappMediaMetadataRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodHead
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReceiveWhatsAppMessageApiService.GetWhatsappMediaMetadata")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/whatsapp/1/senders/{sender}/media/{mediaId}"
	localVarPath = strings.Replace(localVarPath, "{"+"sender"+"}", _neturl.PathEscape(parameterToString(r.sender, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mediaId"+"}", _neturl.PathEscape(parameterToString(r.mediaId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMarkWhatsappMessageAsReadRequest struct {
	ctx        _context.Context
	ApiService *ReceiveWhatsAppMessageApiService
	sender     string
	messageId  string
}

func (r ApiMarkWhatsappMessageAsReadRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MarkWhatsappMessageAsReadExecute(r)
}

/*
 * MarkWhatsappMessageAsRead Mark as read
 * Mark WhatsApp messages sent by end-users as read.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param sender Registered WhatsApp sender number. Must be in international format.
 * @param messageId ID of the message to be marked as read.
 * @return ApiMarkWhatsappMessageAsReadRequest
 */
func (a *ReceiveWhatsAppMessageApiService) MarkWhatsappMessageAsRead(ctx _context.Context, sender string, messageId string) ApiMarkWhatsappMessageAsReadRequest {
	return ApiMarkWhatsappMessageAsReadRequest{
		ApiService: a,
		ctx:        ctx,
		sender:     sender,
		messageId:  messageId,
	}
}

/*
 * Execute executes the request
 */
func (a *ReceiveWhatsAppMessageApiService) MarkWhatsappMessageAsReadExecute(r ApiMarkWhatsappMessageAsReadRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReceiveWhatsAppMessageApiService.MarkWhatsappMessageAsRead")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/whatsapp/1/senders/{sender}/message/{messageId}/read"
	localVarPath = strings.Replace(localVarPath, "{"+"sender"+"}", _neturl.PathEscape(parameterToString(r.sender, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"messageId"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MarkAsReadErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
