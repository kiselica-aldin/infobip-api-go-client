/**
 * Infobip Client API Libraries OpenAPI Specification
 *
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package infobip

import (
	"encoding/json"
)

// WhatsAppApiException struct for WhatsAppApiException
type WhatsAppApiException struct {
	RequestError *WhatsAppApiRequestError `json:"requestError,omitempty"`
}

// NewWhatsAppApiException instantiates a new WhatsAppApiException object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWhatsAppApiException() *WhatsAppApiException {
	this := WhatsAppApiException{}
	return &this
}

// NewWhatsAppApiExceptionWithDefaults instantiates a new WhatsAppApiException object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWhatsAppApiExceptionWithDefaults() *WhatsAppApiException {
	this := WhatsAppApiException{}
	return &this
}

// GetRequestError returns the RequestError field value if set, zero value otherwise.
func (o *WhatsAppApiException) GetRequestError() WhatsAppApiRequestError {
	if o == nil || o.RequestError == nil {
		var ret WhatsAppApiRequestError
		return ret
	}
	return *o.RequestError
}

// GetRequestErrorOk returns a tuple with the RequestError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhatsAppApiException) GetRequestErrorOk() (*WhatsAppApiRequestError, bool) {
	if o == nil || o.RequestError == nil {
		return nil, false
	}
	return o.RequestError, true
}

// HasRequestError returns a boolean if a field has been set.
func (o *WhatsAppApiException) HasRequestError() bool {
	if o != nil && o.RequestError != nil {
		return true
	}

	return false
}

// SetRequestError gets a reference to the given WhatsAppApiRequestError and assigns it to the RequestError field.
func (o *WhatsAppApiException) SetRequestError(v WhatsAppApiRequestError) {
	o.RequestError = &v
}

func (o WhatsAppApiException) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RequestError != nil {
		toSerialize["requestError"] = o.RequestError
	}
	return json.Marshal(toSerialize)
}

type NullableWhatsAppApiException struct {
	value *WhatsAppApiException
	isSet bool
}

func (v NullableWhatsAppApiException) Get() *WhatsAppApiException {
	return v.value
}

func (v *NullableWhatsAppApiException) Set(val *WhatsAppApiException) {
	v.value = val
	v.isSet = true
}

func (v NullableWhatsAppApiException) IsSet() bool {
	return v.isSet
}

func (v *NullableWhatsAppApiException) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhatsAppApiException(val *WhatsAppApiException) *NullableWhatsAppApiException {
	return &NullableWhatsAppApiException{value: val, isSet: true}
}

func (v NullableWhatsAppApiException) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhatsAppApiException) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
