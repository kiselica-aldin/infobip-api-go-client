/**
 * Infobip Client API Libraries OpenAPI Specification
 *
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package infobip

import (
	"encoding/json"
)

// SmsTextualMessage struct for SmsTextualMessage
type SmsTextualMessage struct {
	// Additional client's data that will be sent on the notifyUrl. The maximum value is 200 characters.
	CallbackData *string `json:"callbackData,omitempty"`
	// Scheduling object that allows setting up detailed time windows in which the message can be sent. Consists of `from`, `to` and `days` properties. `Days` property is mandatory. `From` and `to` properties should be either both included, to allow finer time window granulation or both omitted, to include whole days in the delivery time window.
	DeliveryTimeWindow *SmsDeliveryTimeWindow `json:"deliveryTimeWindow,omitempty"`
	Destinations       *[]SmsDestination      `json:"destinations,omitempty"`
	// Can be `true` or `false`. If the value is set to `true`, a flash SMS will be sent. Otherwise, a normal SMS will be sent. The default value is `false`.
	Flash *bool `json:"flash,omitempty"`
	// Represents a sender ID which can be alphanumeric or numeric. Alphanumeric sender ID length should be between 3 and 11 characters (Example: `CompanyName`). Numeric sender ID length should be between 3 and 14 characters.
	From *string `json:"from,omitempty"`
	// The real-time Intermediate delivery report that will be sent on your callback server. Can be `true` or `false`.
	IntermediateReport *bool        `json:"intermediateReport,omitempty"`
	Language           *SmsLanguage `json:"language,omitempty"`
	// Preferred Delivery report content type. Can be `application/json` or `application/xml`.
	NotifyContentType *string `json:"notifyContentType,omitempty"`
	// The URL on your call back server on which the Delivery report will be sent.
	NotifyUrl *string `json:"notifyUrl,omitempty"`
	// Region specific parameters, often specified by local laws. Use this if country or region that you are sending SMS to requires some extra parameters.
	Regional *SmsRegionalOptions `json:"regional,omitempty"`
	// Date and time when the message is to be sent. Used for scheduled SMS (SMS not sent immediately, but at the scheduled time). Has the following format: `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
	SendAt *Time `json:"sendAt,omitempty"`
	// Text of the message that will be sent.
	Text *string `json:"text,omitempty"`
	// Conversion of a message text from one script to another. Possible values: `TURKISH`, `GREEK`, `CYRILLIC`, `SERBIAN_CYRILLIC`, `CENTRAL_EUROPEAN`, `BALTIC` and `NON_UNICODE`.
	Transliteration *string `json:"transliteration,omitempty"`
	// The message validity period in minutes. When the period expires, it will not be allowed for the message to be sent. Validity period longer than 48h is not supported (in this case, it will be automatically set to 48h).
	ValidityPeriod *int64 `json:"validityPeriod,omitempty"`
}

// NewSmsTextualMessage instantiates a new SmsTextualMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsTextualMessage() *SmsTextualMessage {
	this := SmsTextualMessage{}
	return &this
}

// NewSmsTextualMessageWithDefaults instantiates a new SmsTextualMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsTextualMessageWithDefaults() *SmsTextualMessage {
	this := SmsTextualMessage{}
	return &this
}

// GetCallbackData returns the CallbackData field value if set, zero value otherwise.
func (o *SmsTextualMessage) GetCallbackData() string {
	if o == nil || o.CallbackData == nil {
		var ret string
		return ret
	}
	return *o.CallbackData
}

// GetCallbackDataOk returns a tuple with the CallbackData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsTextualMessage) GetCallbackDataOk() (*string, bool) {
	if o == nil || o.CallbackData == nil {
		return nil, false
	}
	return o.CallbackData, true
}

// HasCallbackData returns a boolean if a field has been set.
func (o *SmsTextualMessage) HasCallbackData() bool {
	if o != nil && o.CallbackData != nil {
		return true
	}

	return false
}

// SetCallbackData gets a reference to the given string and assigns it to the CallbackData field.
func (o *SmsTextualMessage) SetCallbackData(v string) {
	o.CallbackData = &v
}

// GetDeliveryTimeWindow returns the DeliveryTimeWindow field value if set, zero value otherwise.
func (o *SmsTextualMessage) GetDeliveryTimeWindow() SmsDeliveryTimeWindow {
	if o == nil || o.DeliveryTimeWindow == nil {
		var ret SmsDeliveryTimeWindow
		return ret
	}
	return *o.DeliveryTimeWindow
}

// GetDeliveryTimeWindowOk returns a tuple with the DeliveryTimeWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsTextualMessage) GetDeliveryTimeWindowOk() (*SmsDeliveryTimeWindow, bool) {
	if o == nil || o.DeliveryTimeWindow == nil {
		return nil, false
	}
	return o.DeliveryTimeWindow, true
}

// HasDeliveryTimeWindow returns a boolean if a field has been set.
func (o *SmsTextualMessage) HasDeliveryTimeWindow() bool {
	if o != nil && o.DeliveryTimeWindow != nil {
		return true
	}

	return false
}

// SetDeliveryTimeWindow gets a reference to the given SmsDeliveryTimeWindow and assigns it to the DeliveryTimeWindow field.
func (o *SmsTextualMessage) SetDeliveryTimeWindow(v SmsDeliveryTimeWindow) {
	o.DeliveryTimeWindow = &v
}

// GetDestinations returns the Destinations field value if set, zero value otherwise.
func (o *SmsTextualMessage) GetDestinations() []SmsDestination {
	if o == nil || o.Destinations == nil {
		var ret []SmsDestination
		return ret
	}
	return *o.Destinations
}

// GetDestinationsOk returns a tuple with the Destinations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsTextualMessage) GetDestinationsOk() (*[]SmsDestination, bool) {
	if o == nil || o.Destinations == nil {
		return nil, false
	}
	return o.Destinations, true
}

// HasDestinations returns a boolean if a field has been set.
func (o *SmsTextualMessage) HasDestinations() bool {
	if o != nil && o.Destinations != nil {
		return true
	}

	return false
}

// SetDestinations gets a reference to the given []SmsDestination and assigns it to the Destinations field.
func (o *SmsTextualMessage) SetDestinations(v []SmsDestination) {
	o.Destinations = &v
}

// GetFlash returns the Flash field value if set, zero value otherwise.
func (o *SmsTextualMessage) GetFlash() bool {
	if o == nil || o.Flash == nil {
		var ret bool
		return ret
	}
	return *o.Flash
}

// GetFlashOk returns a tuple with the Flash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsTextualMessage) GetFlashOk() (*bool, bool) {
	if o == nil || o.Flash == nil {
		return nil, false
	}
	return o.Flash, true
}

// HasFlash returns a boolean if a field has been set.
func (o *SmsTextualMessage) HasFlash() bool {
	if o != nil && o.Flash != nil {
		return true
	}

	return false
}

// SetFlash gets a reference to the given bool and assigns it to the Flash field.
func (o *SmsTextualMessage) SetFlash(v bool) {
	o.Flash = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *SmsTextualMessage) GetFrom() string {
	if o == nil || o.From == nil {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsTextualMessage) GetFromOk() (*string, bool) {
	if o == nil || o.From == nil {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *SmsTextualMessage) HasFrom() bool {
	if o != nil && o.From != nil {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *SmsTextualMessage) SetFrom(v string) {
	o.From = &v
}

// GetIntermediateReport returns the IntermediateReport field value if set, zero value otherwise.
func (o *SmsTextualMessage) GetIntermediateReport() bool {
	if o == nil || o.IntermediateReport == nil {
		var ret bool
		return ret
	}
	return *o.IntermediateReport
}

// GetIntermediateReportOk returns a tuple with the IntermediateReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsTextualMessage) GetIntermediateReportOk() (*bool, bool) {
	if o == nil || o.IntermediateReport == nil {
		return nil, false
	}
	return o.IntermediateReport, true
}

// HasIntermediateReport returns a boolean if a field has been set.
func (o *SmsTextualMessage) HasIntermediateReport() bool {
	if o != nil && o.IntermediateReport != nil {
		return true
	}

	return false
}

// SetIntermediateReport gets a reference to the given bool and assigns it to the IntermediateReport field.
func (o *SmsTextualMessage) SetIntermediateReport(v bool) {
	o.IntermediateReport = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *SmsTextualMessage) GetLanguage() SmsLanguage {
	if o == nil || o.Language == nil {
		var ret SmsLanguage
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsTextualMessage) GetLanguageOk() (*SmsLanguage, bool) {
	if o == nil || o.Language == nil {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *SmsTextualMessage) HasLanguage() bool {
	if o != nil && o.Language != nil {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given SmsLanguage and assigns it to the Language field.
func (o *SmsTextualMessage) SetLanguage(v SmsLanguage) {
	o.Language = &v
}

// GetNotifyContentType returns the NotifyContentType field value if set, zero value otherwise.
func (o *SmsTextualMessage) GetNotifyContentType() string {
	if o == nil || o.NotifyContentType == nil {
		var ret string
		return ret
	}
	return *o.NotifyContentType
}

// GetNotifyContentTypeOk returns a tuple with the NotifyContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsTextualMessage) GetNotifyContentTypeOk() (*string, bool) {
	if o == nil || o.NotifyContentType == nil {
		return nil, false
	}
	return o.NotifyContentType, true
}

// HasNotifyContentType returns a boolean if a field has been set.
func (o *SmsTextualMessage) HasNotifyContentType() bool {
	if o != nil && o.NotifyContentType != nil {
		return true
	}

	return false
}

// SetNotifyContentType gets a reference to the given string and assigns it to the NotifyContentType field.
func (o *SmsTextualMessage) SetNotifyContentType(v string) {
	o.NotifyContentType = &v
}

// GetNotifyUrl returns the NotifyUrl field value if set, zero value otherwise.
func (o *SmsTextualMessage) GetNotifyUrl() string {
	if o == nil || o.NotifyUrl == nil {
		var ret string
		return ret
	}
	return *o.NotifyUrl
}

// GetNotifyUrlOk returns a tuple with the NotifyUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsTextualMessage) GetNotifyUrlOk() (*string, bool) {
	if o == nil || o.NotifyUrl == nil {
		return nil, false
	}
	return o.NotifyUrl, true
}

// HasNotifyUrl returns a boolean if a field has been set.
func (o *SmsTextualMessage) HasNotifyUrl() bool {
	if o != nil && o.NotifyUrl != nil {
		return true
	}

	return false
}

// SetNotifyUrl gets a reference to the given string and assigns it to the NotifyUrl field.
func (o *SmsTextualMessage) SetNotifyUrl(v string) {
	o.NotifyUrl = &v
}

// GetRegional returns the Regional field value if set, zero value otherwise.
func (o *SmsTextualMessage) GetRegional() SmsRegionalOptions {
	if o == nil || o.Regional == nil {
		var ret SmsRegionalOptions
		return ret
	}
	return *o.Regional
}

// GetRegionalOk returns a tuple with the Regional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsTextualMessage) GetRegionalOk() (*SmsRegionalOptions, bool) {
	if o == nil || o.Regional == nil {
		return nil, false
	}
	return o.Regional, true
}

// HasRegional returns a boolean if a field has been set.
func (o *SmsTextualMessage) HasRegional() bool {
	if o != nil && o.Regional != nil {
		return true
	}

	return false
}

// SetRegional gets a reference to the given SmsRegionalOptions and assigns it to the Regional field.
func (o *SmsTextualMessage) SetRegional(v SmsRegionalOptions) {
	o.Regional = &v
}

// GetSendAt returns the SendAt field value if set, zero value otherwise.
func (o *SmsTextualMessage) GetSendAt() Time {
	if o == nil || o.SendAt == nil {
		var ret Time
		return ret
	}
	return *o.SendAt
}

// GetSendAtOk returns a tuple with the SendAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsTextualMessage) GetSendAtOk() (*Time, bool) {
	if o == nil || o.SendAt == nil {
		return nil, false
	}
	return o.SendAt, true
}

// HasSendAt returns a boolean if a field has been set.
func (o *SmsTextualMessage) HasSendAt() bool {
	if o != nil && o.SendAt != nil {
		return true
	}

	return false
}

// SetSendAt gets a reference to the given Time and assigns it to the SendAt field.
func (o *SmsTextualMessage) SetSendAt(v Time) {
	o.SendAt = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *SmsTextualMessage) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsTextualMessage) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *SmsTextualMessage) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *SmsTextualMessage) SetText(v string) {
	o.Text = &v
}

// GetTransliteration returns the Transliteration field value if set, zero value otherwise.
func (o *SmsTextualMessage) GetTransliteration() string {
	if o == nil || o.Transliteration == nil {
		var ret string
		return ret
	}
	return *o.Transliteration
}

// GetTransliterationOk returns a tuple with the Transliteration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsTextualMessage) GetTransliterationOk() (*string, bool) {
	if o == nil || o.Transliteration == nil {
		return nil, false
	}
	return o.Transliteration, true
}

// HasTransliteration returns a boolean if a field has been set.
func (o *SmsTextualMessage) HasTransliteration() bool {
	if o != nil && o.Transliteration != nil {
		return true
	}

	return false
}

// SetTransliteration gets a reference to the given string and assigns it to the Transliteration field.
func (o *SmsTextualMessage) SetTransliteration(v string) {
	o.Transliteration = &v
}

// GetValidityPeriod returns the ValidityPeriod field value if set, zero value otherwise.
func (o *SmsTextualMessage) GetValidityPeriod() int64 {
	if o == nil || o.ValidityPeriod == nil {
		var ret int64
		return ret
	}
	return *o.ValidityPeriod
}

// GetValidityPeriodOk returns a tuple with the ValidityPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsTextualMessage) GetValidityPeriodOk() (*int64, bool) {
	if o == nil || o.ValidityPeriod == nil {
		return nil, false
	}
	return o.ValidityPeriod, true
}

// HasValidityPeriod returns a boolean if a field has been set.
func (o *SmsTextualMessage) HasValidityPeriod() bool {
	if o != nil && o.ValidityPeriod != nil {
		return true
	}

	return false
}

// SetValidityPeriod gets a reference to the given int64 and assigns it to the ValidityPeriod field.
func (o *SmsTextualMessage) SetValidityPeriod(v int64) {
	o.ValidityPeriod = &v
}

func (o SmsTextualMessage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CallbackData != nil {
		toSerialize["callbackData"] = o.CallbackData
	}
	if o.DeliveryTimeWindow != nil {
		toSerialize["deliveryTimeWindow"] = o.DeliveryTimeWindow
	}
	if o.Destinations != nil {
		toSerialize["destinations"] = o.Destinations
	}
	if o.Flash != nil {
		toSerialize["flash"] = o.Flash
	}
	if o.From != nil {
		toSerialize["from"] = o.From
	}
	if o.IntermediateReport != nil {
		toSerialize["intermediateReport"] = o.IntermediateReport
	}
	if o.Language != nil {
		toSerialize["language"] = o.Language
	}
	if o.NotifyContentType != nil {
		toSerialize["notifyContentType"] = o.NotifyContentType
	}
	if o.NotifyUrl != nil {
		toSerialize["notifyUrl"] = o.NotifyUrl
	}
	if o.Regional != nil {
		toSerialize["regional"] = o.Regional
	}
	if o.SendAt != nil {
		toSerialize["sendAt"] = o.SendAt
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	if o.Transliteration != nil {
		toSerialize["transliteration"] = o.Transliteration
	}
	if o.ValidityPeriod != nil {
		toSerialize["validityPeriod"] = o.ValidityPeriod
	}
	return json.Marshal(toSerialize)
}

type NullableSmsTextualMessage struct {
	value *SmsTextualMessage
	isSet bool
}

func (v NullableSmsTextualMessage) Get() *SmsTextualMessage {
	return v.value
}

func (v *NullableSmsTextualMessage) Set(val *SmsTextualMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsTextualMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsTextualMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsTextualMessage(val *SmsTextualMessage) *NullableSmsTextualMessage {
	return &NullableSmsTextualMessage{value: val, isSet: true}
}

func (v NullableSmsTextualMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsTextualMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
