/**
 * Infobip Client API Libraries OpenAPI Specification
 *
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package infobip

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ManageWhatsAppApiService ManageWhatsAppApi service
type ManageWhatsAppApiService service

type ApiCreateWhatsappTemplateRequest struct {
	ctx                                      _context.Context
	ApiService                               *ManageWhatsAppApiService
	sender                                   string
	whatsAppTemplateTemplatePublicApiRequest *WhatsAppTemplateTemplatePublicApiRequest
}

func (r ApiCreateWhatsappTemplateRequest) WhatsAppTemplateTemplatePublicApiRequest(whatsAppTemplateTemplatePublicApiRequest WhatsAppTemplateTemplatePublicApiRequest) ApiCreateWhatsappTemplateRequest {
	r.whatsAppTemplateTemplatePublicApiRequest = &whatsAppTemplateTemplatePublicApiRequest
	return r
}

func (r ApiCreateWhatsappTemplateRequest) Execute() (WhatsAppTemplateTemplateApiResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateWhatsappTemplateExecute(r)
}

/*
 * CreateWhatsappTemplate Create WhatsApp Template
 * Create WhatsApp template. Created template will be submitted for WhatsApp's review and approval. Once approved, template can be sent to end-users. Refer to [template guidelines](https://www.infobip.com/docs/whatsapp/message-types#guidelines-amp-best-practices) for additional info.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param sender Registered WhatsApp sender number. Must be in international format.
 * @return ApiCreateWhatsappTemplateRequest
 */
func (a *ManageWhatsAppApiService) CreateWhatsappTemplate(ctx _context.Context, sender string) ApiCreateWhatsappTemplateRequest {
	return ApiCreateWhatsappTemplateRequest{
		ApiService: a,
		ctx:        ctx,
		sender:     sender,
	}
}

/*
 * Execute executes the request
 * @return WhatsAppTemplateTemplateApiResponse
 */
func (a *ManageWhatsAppApiService) CreateWhatsappTemplateExecute(r ApiCreateWhatsappTemplateRequest) (WhatsAppTemplateTemplateApiResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  WhatsAppTemplateTemplateApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManageWhatsAppApiService.CreateWhatsappTemplate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/whatsapp/1/senders/{sender}/templates"
	localVarPath = strings.Replace(localVarPath, "{"+"sender"+"}", _neturl.PathEscape(parameterToString(r.sender, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.whatsAppTemplateTemplatePublicApiRequest == nil {
		return localVarReturnValue, nil, reportError("whatsAppTemplateTemplatePublicApiRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.whatsAppTemplateTemplatePublicApiRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WhatsAppTemplateApiException
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v WhatsAppTemplateApiException
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WhatsAppTemplateApiException
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v WhatsAppTemplateApiException
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteWhatsappMediaRequest struct {
	ctx                _context.Context
	ApiService         *ManageWhatsAppApiService
	sender             string
	urlDeletionRequest *UrlDeletionRequest
}

func (r ApiDeleteWhatsappMediaRequest) UrlDeletionRequest(urlDeletionRequest UrlDeletionRequest) ApiDeleteWhatsappMediaRequest {
	r.urlDeletionRequest = &urlDeletionRequest
	return r
}

func (r ApiDeleteWhatsappMediaRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.DeleteWhatsappMediaExecute(r)
}

/*
 * DeleteWhatsappMedia Delete media
 * Delete WhatsApp media. May be outbound or inbound media.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param sender Registered WhatsApp sender number. Must be in international format.
 * @return ApiDeleteWhatsappMediaRequest
 */
func (a *ManageWhatsAppApiService) DeleteWhatsappMedia(ctx _context.Context, sender string) ApiDeleteWhatsappMediaRequest {
	return ApiDeleteWhatsappMediaRequest{
		ApiService: a,
		ctx:        ctx,
		sender:     sender,
	}
}

/*
 * Execute executes the request
 * @return string
 */
func (a *ManageWhatsAppApiService) DeleteWhatsappMediaExecute(r ApiDeleteWhatsappMediaRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManageWhatsAppApiService.DeleteWhatsappMedia")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/whatsapp/1/senders/{sender}/media"
	localVarPath = strings.Replace(localVarPath, "{"+"sender"+"}", _neturl.PathEscape(parameterToString(r.sender, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.urlDeletionRequest == nil {
		return localVarReturnValue, nil, reportError("urlDeletionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.urlDeletionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWhatsappTemplatesRequest struct {
	ctx        _context.Context
	ApiService *ManageWhatsAppApiService
	sender     string
}

func (r ApiGetWhatsappTemplatesRequest) Execute() (WhatsAppTemplateTemplatesApiResponse, *_nethttp.Response, error) {
	return r.ApiService.GetWhatsappTemplatesExecute(r)
}

/*
 * GetWhatsappTemplates Get WhatsApp Templates
 * Get all the templates and their statuses for a given sender.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param sender Registered WhatsApp sender number. Must be in international format.
 * @return ApiGetWhatsappTemplatesRequest
 */
func (a *ManageWhatsAppApiService) GetWhatsappTemplates(ctx _context.Context, sender string) ApiGetWhatsappTemplatesRequest {
	return ApiGetWhatsappTemplatesRequest{
		ApiService: a,
		ctx:        ctx,
		sender:     sender,
	}
}

/*
 * Execute executes the request
 * @return WhatsAppTemplateTemplatesApiResponse
 */
func (a *ManageWhatsAppApiService) GetWhatsappTemplatesExecute(r ApiGetWhatsappTemplatesRequest) (WhatsAppTemplateTemplatesApiResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  WhatsAppTemplateTemplatesApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManageWhatsAppApiService.GetWhatsappTemplates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/whatsapp/1/senders/{sender}/templates"
	localVarPath = strings.Replace(localVarPath, "{"+"sender"+"}", _neturl.PathEscape(parameterToString(r.sender, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v WhatsAppTemplateApiException
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v WhatsAppTemplateApiException
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v WhatsAppTemplateApiException
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
